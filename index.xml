<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> Connecting the dots</title>
    <link>https://AlfiyaZi.github.io/</link>
    <description>Recent content on  Connecting the dots</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2017 &lt;a&gt;Hucore theme&lt;/a&gt; &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; â™¥</copyright>
    <lastBuildDate>Fri, 17 Nov 2017 12:33:41 +0500</lastBuildDate>
    
	<atom:link href="https://AlfiyaZi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Time-complexity</title>
      <link>https://AlfiyaZi.github.io/posts/time-complexity/</link>
      <pubDate>Fri, 17 Nov 2017 12:33:41 +0500</pubDate>
      
      <guid>https://AlfiyaZi.github.io/posts/time-complexity/</guid>
      <description>This page documents the time-complexity (aka &amp;ldquo;Big O&amp;rdquo; or &amp;ldquo;Big Oh&amp;rdquo;) of various operations in current CPython. Other Python implementations (or older or still-under development versions of CPython) may have slightly different performance characteristics. However, it is generally safe to assume that they are not slower by more than a factor of O(log n).
Generally, &amp;lsquo;n&amp;rsquo; is the number of elements currently in the container. &amp;lsquo;k&amp;rsquo; is either the value of a parameter or the number of elements in the parameter.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://AlfiyaZi.github.io/posts/resources/</link>
      <pubDate>Tue, 14 Nov 2017 21:46:12 +0500</pubDate>
      
      <guid>https://AlfiyaZi.github.io/posts/resources/</guid>
      <description>https://github.com/starandtina/backend-interview-questions</description>
    </item>
    
    <item>
      <title>Math example</title>
      <link>https://AlfiyaZi.github.io/posts/math-example/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://AlfiyaZi.github.io/posts/math-example/</guid>
      <description>Numb3rs 102: Sabotage Don investigates a series of train wrecks that recreate accidents due to railroad negligence. A numerical code is left at the site of each accident. Charlie helps Don to find the terrorist behind the recreations by breaking the codes, which contain statistics of the wrecks occurred in the past.
The art of breaking codes by analyzing patterns is part of a wider mathematical area called Cryptography. In Episode 205 the reader can find a brief explanation of some of the simplest algorithms to encode and decode information (we also refer the reader to Episode 324).</description>
    </item>
    
  </channel>
</rss>